"""
Django settings for shope project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import locale
import os
import ctypes
from django.utils.translation import gettext_lazy as _
from dotenv import load_dotenv, find_dotenv
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG')

DOCKER = os.environ.get('DOCKER')
# Docker
if DOCKER:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.getenv("POSTGRES_DB"),
            'PASSWORD': os.getenv("POSTGRES_PASSWORD"),
            'USER': os.getenv("POSTGRES_USER"),
            'HOST': 'db-shop',
            'PORT': '5432',
        }
    }
    STATIC_ROOT = os.path.join(BASE_DIR, '/static')
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]

STATIC_URL = '/static/'

# ALLOWED_HOSTS = ["*"]

ALLOWED_HOSTS = ['127.0.0.1', 'localhost', 'testserver']
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'debug_toolbar',
    'rest_framework',
    'auth_app',
    'core',
    'taggit',
    'catalog_app',
    'profile_app',
    'cart_app',
    'pay_app.apps.PayAppConfig',
    'order_app.apps.OrderAppConfig',
    'phonenumber_field',


]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
]

ROOT_URLCONF = 'shope.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.utils.context_processors.cart_processor',
                'core.utils.context_processors.get_category_list',
            ],
        },
    },
]

WSGI_APPLICATION = 'shope.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

if os.name == 'nt':
    windll = ctypes.windll.kernel32
    language = locale.windows_locale[windll.GetUserDefaultUILanguage()][:2]
    if language == 'ru':
        LANGUAGE_CODE = language
    else:
        LANGUAGE_CODE = 'en'
elif os.name == 'posix':
    LANGUAGE_CODE = os.environ.get('LANG', 'en')[:2]
else:
    LANGUAGE_CODE = 'en'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = False

USE_TZ = True

LANGUAGES = [
    ('en', _('English')),
    ('ru', _('Russian'))
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

FIXTURE_DIRS = [
    'fixtures',
]

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

INTERNAL_IPS = [
    '127.0.0.1'
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

load_dotenv(find_dotenv())

EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = os.environ.get("EMAIL_PORT")
EMAIL_USE_TLS = False
EMAIL_USE_SSL = True

EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")

AUTH_USER_MODEL = 'auth_app.User'
DOMAIN_NAME = os.environ.get("DOMAIN_NAME")

# payment
PAY_ACCOUNT_ID = os.environ.get('PAY_ACCOUNT_ID')
PAY_ACCOUNT_SECRET_KEY = os.environ.get('PAY_ACCOUNT_SECRET_KEY')

# celery
CELERY_TIMEZONE = os.environ.get('CELERY_TIMEZONE')
CELERY_TASK_TRACK_STARTED = os.environ.get('CELERY_TASK_TRACK_STARTED')
CELERY_TASK_TIME_LIMIT = 30 * 60

# REDIS
REDIS_HOST = '0.0.0.0'
REDIS_PORT = '6379'
REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'
CELERY_BROKER_URL = REDIS_URL
CELERY_BROKER_TRANSPORT_OPTIONS = {'visibility_timeout': 3600}
CELERY_RESULT_BACKEND = REDIS_URL
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# authentication
LOGIN_REDIRECT_URL = '/'
LOGIN_ERROR_URL = '/'
LOGOUT_REDIRECT_URL = '/'
LOGIN_URL = '/auth/login'

# Payment
SUCCESS_PAYMENT = 'succeeded'

# cache parameters
SERVER_NAME = '127.0.0.1'
SERVER_PORT = 8000


def make_key(key, key_prefix, version):
    """получить ключ кеша"""
    return key


CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': os.path.join(BASE_DIR, 'shope_cache'),
        'KEY_FUNCTION': make_key
    }
}

# парметры по умолчания времени кеширования
CACHE_VALUES = {
    'DEFAULT': 86400,  # время кешировния по умолчанию
    'CATEGORY': 86400,  # время кеширования каталога
    'DETAIL_PRODUCT': 86400,  # время кеширования детальной страницы продукта
    'TOP_PRODUCT': 86400,  # время кеширования детальной страницы продукта
    'CATALOG': 86400,  # время кеширования каталога
    'BANNER': 600,  # время кеширования банера
    'MIN_AMOUNT_FOR_FREE_DELIVERY': 2000,  # минимальная сумма заказа для бесплатной доставки
    'COST_DELIVERY': 200,  # стоимость доставки
}
